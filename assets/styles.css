@import url(https://fonts.bunny.net/css?family=inter:400,700,900);

:root {
    --fs-2xs: clamp(0.51rem, -0.02vi + 0.52rem, 0.5rem);
    --fs-xs: clamp(0.64rem, 0.05vi + 0.63rem, 0.67rem);
    --fs-sm: clamp(0.8rem, 0.17vi + 0.76rem, 0.89rem);
    --fs-base: clamp(1rem, 0.34vi + 0.91rem, 1.19rem);
    --fs-md: clamp(1.25rem, 0.61vi + 1.1rem, 1.58rem);
    --fs-lg: clamp(1.56rem, 1vi + 1.31rem, 2.11rem);
    --fs-xl: clamp(1.95rem, 1.56vi + 1.56rem, 2.81rem);
    --fs-2xl: clamp(2.44rem, 2.38vi + 1.85rem, 3.75rem);
    --fs-3xl: clamp(3.05rem, 3.54vi + 2.17rem, 5rem);
}

*,
*::before,
*::after {
    box-sizing: border-box;
}

body {
    min-height: 100vh;
    background-color: rgb(255, 247, 241);
    margin: 0;
    line-height: calc(1ex / 0.32);
    -webkit-font-smoothing: antialiased;
    font-size: 16px;
    font-family: 'Inter', Avenir, Montserrat, Corbel, 'URW Gothic', source-sans-pro, sans-serif;
}

body,
h1,
h2,
h3,
h4,
h5,
h6,
p,
figure,
blockquote {
    margin-block-end: 0;
    ;
}

fieldset {
    border: none;
    margin: 0;
    padding: 0;
}

img,
picture,
video,
canvas,
svg {
    display: block;
    max-width: 100%;
}

input,
button,
textarea,
select {
    font: inherit;
    cursor: pointer;
}

button {
    transition: background-color 0.5s ease;

    &:hover {
        background-color: #a25f2f;
    }
&:disabled {
    background: #b4aba4;
    cursor: default;
}
}

input {
    width: 100%;
    border: none;
    outline: none;
    margin-bottom: 8px;
    border-bottom: 1px solid #b56e3c;
    background: rgba(0, 0, 0, 0.01);
    padding: 5px 5px 0 5px;

    &:focus {
        border: solid 1px #b56e3c;
    }

    &:user-invalid {
        border: 1px solid red;
    }

}

label:has(+ input:required)::after {
    content: "*";
    position: absolute;
    top: -4px;
    margin-left: 2px;
}

button {
    width: 100%;
    border: none;
    padding: 1rem;
    background-color: rgb(187, 99, 37);
    color: white;
    font-size: var(--fs-base);
    font-weight: 700;
    letter-spacing: -0.4px;
    border-radius: 0 0 5px 5px;
}

h1,
h2,
h3,
h4,
h5,
h6 {
    overflow-wrap: break-word;
    text-wrap: balance;
    letter-spacing: -0.06ch;
    margin-bottom: 2rem;
}

h1 {
    font-size: var(--fs-3xl);

    & svg {
        height: var(--fs-2xl);
        display: inline-block;
    }
}

h2 {
    font-size: var(--fs-lg);
}

p,
li,
figcaption {
    font-size: var(--fs-base);
    width: 70ch;
    max-width: 100%;
    text-wrap: pretty;
}

.subtext {
    text-align: center;
    font-size: var(--fs-xs);
    margin: auto;
}

#root,
#__next {
    isolation: isolate;
}

label {
    text-transform: uppercase;
    font-size: var(--fs-xs);
}

header {
    position: relative;
    width: 100%;
    aspect-ratio: 4;
    text-align: center;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;

    & img {
        min-width: 100%;
        min-height: 100%;
        position: absolute;
        object-fit: cover;
        z-index: -1;
        filter: brightness(0.75);
    }
}

main {
    padding-inline: 3rem;
    margin-block: 3rem;

    &>* {
        max-width: 800px;
        margin: 0 auto;
        width: 100%;
    }
}

#matchmessage {
    color: #BB6425;
    font-size: var(--fs-xs);
    text-align: center;
    margin: 0 auto;
}

.form {
    background-color: #f4e7dc;
    padding: 1rem;
    border-radius: 5px 5px 0 0 ;
    border: 1px solid #e4d5c9
}

@media screen and (width > 800px) {
    body {
        display: flex;
        flex-direction: row;
    }

    main {
        width: 60vw;
        display: flex;
        flex-direction: column;
        justify-content: center;

    }

}

@media screen and (width > 1100px) {

    fieldset {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        grid-template-rows: repeat(2, 1fr);
        grid-column-gap: 2rem;

        & label {
            position: relative;
            top: 20px;
        }

        & label:first-child {
            grid-area: 1 / 1 / 2 / 2;
        }

        & input {
            grid-area: 2 / 1 / 3 / 2;

            &:last-child {
                grid-area: 2 / 2 / 3 / 3;
            }
        }
    }

}